plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.soccerjerseysapplication.orders'
version = '1.0.0-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = '0.8.11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	mapStructVersion = "1.5.3.Final"
	lombokVersion = "1.18.30"
	lombokMapStructBindingVersion = "0.2.0"
}

repositories {
	mavenCentral()
}

//dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-validation'
//	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'io.projectreactor:reactor-test'
//}
//
//tasks.named('test') {
//	useJUnitPlatform()
//}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation "org.mapstruct:mapstruct:${mapStructVersion}"
	compileOnly 'org.projectlombok:lombok'
	compileOnly "org.mapstruct:mapstruct-processor:${mapStructVersion}"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly('com.h2database:h2')
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}",
			"org.projectlombok:lombok:${lombokVersion}",
			"org.projectlombok:lombok-mapstruct-binding:${lombokMapStructBindingVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation('com.h2database:h2')
//	implementation 'org.springframework.boot:spring-boot-starter-validation'
//	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
//	compileOnly 'org.projectlombok:lombok'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'com.mysql:mysql-connector-java'
//	//implementation 'org.postgresql:postgresql'
//	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
//	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
//	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'io.projectreactor:reactor-test'
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
//                    "com/movielister/**/MovieDetailsServiceApplication.class",
//                    "**/*MapperImpl.class"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.00
			}
		}
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
