@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml

AddRelTag(aggregate_root, $lineColor = "red")

LAYOUT_TOP_DOWN()
SHOW_PERSON_OUTLINE()

title Container Diagram for Soccer Jerseys E-Commerce System

Person(customer, "Customer", "A customer looking to purchase soccer jerseys")
Person(employee, "Employee", "Employee managing the jersey orders and inventory")
System_Boundary(sjs, "Soccer Jerseys E-Commerce System") {


    ContainerDb(jerseys_db, "Jersey Database", "MySQL", "Stores jersey inventory data", $tags = "storage")
    ContainerDb(teams_db, "Team Database", "MySQL", "Stores team data", $tags = "storage")
    ContainerDb(customers_db, "Customer Database", "MySQL", "Stores customer data", $tags = "storage")
    ContainerDb(orders_db, "Order Database", "MongoDB", "Stores order data", $tags = "storage")

    Container(webapp, "Web Application", "Javascript, React", "Delivers the static content and the soccer jerseys e-commerce's single page application (SPA) to the employee's browser.")
    Container(singlepage_app, "Single-Page Application", "Javascript, React", "Provide the soccer jerseys e-commerce's functionality to employees via their browser")
    Container(api_gateway, "API-Gateway", "Java, Spring Boot", "Provide the soccer jerseys e-commerce's functionality via a JSON/REST HTTP API")

    Container(jerseys_service, "Jerseys Service", "Java, Spring Boot", "Provides jerseys functionality via a JSON/REST HTTP API")
    Container(teams_service, "Teams Service", "Java, Spring Boot", "Provides teams functionality via a JSON/REST HTTP API")
    Container(customers_service, "Customers Service", "Java, Spring Boot", "Provides customers functionality via a JSON/REST HTTP API")
    Container(orders_service, "Orders Service", "Java, Spring Boot", "Provides orders functionality using the aggregator pattern via a JSON/REST HTTP API", $tags="microService")

    Rel(employee, webapp, "Visits soccerjerseys.com using", "HTTPS")
    Rel(customer, webapp, "Visits soccerjerseys.com using", "HTTPS")

    Rel_R(webapp, singlepage_app, "Delivers to the employee and customer's browser")

    Rel(employee, singlepage_app, "Views inventory and manages purchases using", "HTTPS")
    Rel(customer, singlepage_app, "Browses soccer jerseys and places orders", "HTTPS")

    Rel(singlepage_app, api_gateway, "Makes API call to", "JSON/REST/HTTPS")

    Rel(api_gateway, customers_service, "Makes API call to", "JSON/REST/HTTPS")
    Rel(api_gateway, jerseys_service, "Makes API call to", "JSON/REST/HTTPS")
    Rel(api_gateway, teams_service, "Makes API call to", "JSON/REST/HTTPS")
    Rel(api_gateway, orders_service, "Makes API call to", "JSON/REST/HTTPS")

    Rel(orders_service, jerseys_service, "Makes API calls to", "JSON/REST/HTTPS", $tags = "aggregate_root")
    Rel(orders_service, teams_service, "Makes API calls to", "HTTPS/JSON", $tags = "aggregate_root")
    Rel(orders_service, customers_service, "Makes API calls to", "HTTPS/JSON", $tags = "aggregate_root")

    Rel_D(jerseys_service, jerseys_db, "Reads from and writes to", "JDBC")
    Rel_D(teams_service, teams_db, "Reads from and writes to", "JDBC")
    Rel_D(customers_service, customers_db, "Reads from and writes to", "JDBC")
    Rel_R(orders_service, orders_db, "Reads from and writes to", "MongoDB")
}

@enduml























'@startuml
'!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml
'
'!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
'!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
'
'!include FONTAWESOME/users.puml
'
'LAYOUT_TOP_DOWN()
'SHOW_PERSON_OUTLINE()
'
'title Container Diagram for Soccer Jerseys E-Commerce System
'
'Person(customer, "Customer", "A customer looking to purchase soccer jerseys")
'Person(employee, "Employee", "Employee managing the jersey orders and inventory")
'System_Boundary(sjs, "Soccer Jerseys E-Commerce System") {
'    ContainerDb(jerseys_db, "Jersey Database", "MySQL", "Stores jersey inventory data")
'    ContainerDb(teams_db, "Team Database", "MySQL", "Stores team data")
'    ContainerDb(customers_db, "Customer Database", "MySQL", "Stores customer data")
'    ContainerDb(orders_db, "Order Database", "MySQL", "Stores order data")
'
'    Container(jerseys_service, "Jerseys Service", "Spring Boot Application", "Manages jersey data and inventory")
'    Container(teams_service, "Teams Service", "Spring Boot Application", "Manages team information")
'    Container(customers_service, "Customers Service", "Spring Boot Application", "Manages customer information")
'    Container(orders_service, "Orders Service", "Spring Boot Application", "Processes and manages orders", $tags="microService")
'
'    Rel(customer, orders_service, "Places orders using", "HTTP/JSON")
'    Rel(employee, orders_service, "Manages orders and interacts with", "HTTP/JSON")
'    Rel(orders_service, jerseys_service, "Validates jersey availability with", "HTTP/JSON")
'    Rel(orders_service, teams_service, "Fetches team details with", "HTTP/JSON")
'    Rel(orders_service, customers_service, "Verifies customer details with", "HTTP/JSON")
'
'    Rel(jerseys_service, jerseys_db, "Reads from and writes to", "JDBC")
'    Rel(teams_service, teams_db, "Reads from and writes to", "JDBC")
'    Rel(customers_service, customers_db, "Reads from and writes to", "JDBC")
'    Rel(orders_service, orders_db, "Reads from and writes to", "JDBC")
'}
'
'@enduml